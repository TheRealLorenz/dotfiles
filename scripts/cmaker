#!/bin/bash

RESET=$(tput sgr0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
BOLD=$(tput bold)

CMAKE_DEBUG_DIR='cmake-build-debug'
CMAKE_RELEASE_DIR='cmake-build-release'

usage() {
  echo "Usage: cmaker <subcommand> [FLAGS]"
  echo
  echo "Available subcommands: reload, build, clean, help"
  echo "Where"
  echo "  -d --debug   Sets Debug mode"
  echo "  -r --release Sets Release mode"
  echo "  -v --verbose Gives a more verbose output"
  echo "  -y --yes     Automatically confirms operations"
  echo "  -h --help    Prints this message"
}

run_task() {
  TITLE=${2:-Loading}
  OUTPUT=$(GUM_SPIN_TITLE=" $TITLE..." gum spin --show-output -- bash -c "$1 2>&1")
  EXIT_CODE=$?

  [[ $EXIT_CODE -eq 0 ]] \
      && echo "${GREEN}${BOLD}✓${RESET} ${TITLE}" \
      || echo "${RED}${BOLD}✘${RESET} ${TITLE}"

  [[ $EXIT_CODE -ne 0 ]] || [[ ! -z $VERBOSE ]] \
      && echo "${OUTPUT}" | sed 's/^/  /g'

  return $EXIT_CODE
}

clean() {
  [[ ! -z $CONFIRM ]] || gum confirm "Are you sure to delete folder $DIR?" \
      && run_task "rm -rf $DIR" "Deleting $DIR" \
      || echo "Cancelled"
}

reload() {
  run_task "cmake -S . -B $DIR -DCMAKE_BUILD_TYPE=$TYPE" "Reloading CMake project: $TYPE"
}

build() {
  run_task "cmake --build $DIR" "Building CMake project: $TYPE"
}

main() {
  if [[ "$1" == "reload" ]]; then
    reload ${TYPE} ${DIR} ${VERBOSE}
  elif [[ "$1" == "build" ]]; then
    build ${TYPE} ${DIR} ${VERBOSE}
  elif [[ "$1" == "clean" ]]; then
    clean ${TYPE} ${DIR} ${CONFIRM}
  else
    usage
    return 1
  fi
}

VERBOSE=
TYPE='Debug'
DIR=${CMAKE_DEBUG_DIR}
CONFIRM=
PARAMS=()

for var in "$@"; do
  case "${var}" in
    -v | --verbose)
        shift
        VERBOSE=1
        ;;
    -d | --debug)
        shift
        TYPE='Debug'
        DIR=${CMAKE_DEBUG_DIR}
        ;;
    -r | --release)
        shift
        TYPE='Release'
        DIR=${CMAKE_RELEASE_DIR}
        ;;
    -y | --yes)
        shift
        CONFIRM=1
        ;;
    -h | --help)
        shift
        usage
        return 0
        ;;
    --)
        shift
        break 
        ;;
    *)
        shift
        params+=("${var}")
        ;;
  esac
done

for var in "$@"; do
  params+=("${var}")
done

main ${params[@]}
